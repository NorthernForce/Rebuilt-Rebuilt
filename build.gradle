plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-3"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

// Configure the git-properties plugin to output to src/main/deploy
gitProperties {
    gitPropertiesDir = file('src/main/deploy')
    
    // Optimize git properties generation
    extProperty = 'gitProps'
    keys = ['git.branch', 'git.commit.id.abbrev', 'git.commit.time', 'git.commit.id']
    
    // Skip git properties in some cases to improve performance
    failOnNoGitDirectory = false
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Only build for RoboRIO when explicitly requested (for deployment)
// This speeds up development builds significantly
def buildForRoboRio = project.hasProperty('buildRoboRio') || 
                      gradle.startParameter.taskNames.any { it.contains('deploy') || it.contains('roborio') || it.contains('athena') }

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

tasks.withType(CppCompile).configureEach {
    dependsOn generateGitProperties
    
    // Optimize C++ compilation - use simple optimization flags
    if (toolChain in Gcc || toolChain in Clang) {
        compilerArgs.addAll(["-O2", "-pipe"])
    }
}

nativeUtils.platformConfigs.named('windowsx86-64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsx86').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsarm64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('osxuniversal').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxx86-64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxathena').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxsystemcore').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm32').configure {
    it.cppCompiler.args.add("-std=c++2b")
}


model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            // Only add RoboRIO target when needed
            if (buildForRoboRio) {
                targetPlatform wpi.platforms.roborio
            }
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // cppCompilerArgs += '-std=c++2b'

            deployArtifact.component = it
            wpi.cpp.enableExternalTasks(it)
            wpi.sim.enable(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            wpi.cpp.enableExternalTasks(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

// Custom task to format C++ code using clang-format
task format {
    description = 'Format C++ source files using clang-format'
    group = 'formatting'
    
    doLast {
        // Find all C++ source files
        def sourceFiles = []
        fileTree(dir: 'src', includes: ['**/*.cpp', '**/*.cc', '**/*.h']).each { file ->
            sourceFiles << file.absolutePath
        }
        
        if (sourceFiles.isEmpty()) {
            println 'No C++ files found to format'
            return
        }
        
        println "Formatting ${sourceFiles.size()} C++ files..."
        
        // Run clang-format on each file
        sourceFiles.each { filePath ->
            exec {
                commandLine 'clang-format', '-i', '--style=file', filePath
            }
        }
        
        println 'Formatting complete!'
    }
}

// Custom task to build for RoboRio deployment
task buildForDeploy {
    description = 'Build for RoboRio deployment (includes athena platform)'
    group = 'build'
    
    doLast {
        // Execute the build with the buildRoboRio property
        exec {
            workingDir project.projectDir
            commandLine './gradlew', 'clean', 'build', '-PbuildRoboRio=true'
        }
    }
}
