plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-3"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

// Configure the git-properties plugin to output to src/main/deploy
gitProperties {
    gitPropertiesDir = file('src/main/deploy')
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

tasks.withType(CppCompile).configureEach {
    dependsOn generateGitProperties
}

nativeUtils.platformConfigs.named('windowsx86-64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsx86').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsarm64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('osxuniversal').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxx86-64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxathena').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxsystemcore').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm32').configure {
    it.cppCompiler.args.add("-std=c++2b")
}


model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // cppCompilerArgs += '-std=c++2b'

            deployArtifact.component = it
            wpi.cpp.enableExternalTasks(it)
            wpi.sim.enable(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            wpi.cpp.enableExternalTasks(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

// Custom task to format C++ code using clang-format
task format {
    description = 'Format C++ source files using clang-format'
    group = 'formatting'
    
    doLast {
        // Find all C++ source files
        def sourceFiles = []
        fileTree(dir: 'src', includes: ['**/*.cpp', '**/*.cc', '**/*.h']).each { file ->
            sourceFiles << file.absolutePath
        }
        
        if (sourceFiles.isEmpty()) {
            println 'No C++ files found to format'
            return
        }
        
        println "Formatting ${sourceFiles.size()} C++ files..."
        
        // Run clang-format on each file
        sourceFiles.each { filePath ->
            exec {
                commandLine 'clang-format', '-i', '--style=file', filePath
            }
        }
        
        println 'Formatting complete!'
    }
}

tasks.register('copyCompileCommands', Copy) {
    def compileCommandsRoot = layout.buildDirectory.dir("TargetedCompileCommands").get().asFile
    def sourceDir = null

    // Determine the current OS for native compilation targets
    def osName = System.getProperty("os.name").toLowerCase()
    def archName = System.getProperty("os.arch").toLowerCase()

    def nativeTargetDir = null
    if (osName.contains("mac")) {
        // macOS can have different architectures (arm64, x86_64)
        if (archName.contains("aarch64") || archName.contains("arm")) {
            nativeTargetDir = "osxuniversalrelease" // Often 'osxuniversal' for debug builds, 'osxuniversalrelease' for release
        } else {
            nativeTargetDir = "osxuniversalrelease" // Default for Intel Macs too
        }
    } else if (osName.contains("linux")) {
        nativeTargetDir = "linuxx64release" // Common for Linux 64-bit
    } else if (osName.contains("windows")) {
        nativeTargetDir = "windowsx86-64release" // Common for Windows 64-bit
    }

    // --- Prioritized Search for compile_commands.json ---

    // 1. Prioritize the current OS's native *debug* build, as this is most common for IDE work
    if (nativeTargetDir != null) {
        def debugNativePath = "${nativeTargetDir.replace('release', 'debug')}" // e.g., osxuniversaldebug
        def potentialNativeDebugDir = compileCommandsRoot.toPath().resolve(debugNativePath).toFile()
        if (potentialNativeDebugDir.exists() && potentialNativeDebugDir.isDirectory() && new File(potentialNativeDebugDir, "compile_commands.json").exists()) {
            sourceDir = potentialNativeDebugDir
            println "Found compile_commands.json for native OS (debug): ${sourceDir}"
        }
    }

    // 2. If no native debug, try the current OS's native *release* build
    if (sourceDir == null && nativeTargetDir != null) {
        def potentialNativeReleaseDir = compileCommandsRoot.toPath().resolve(nativeTargetDir).toFile()
        if (potentialNativeReleaseDir.exists() && potentialNativeReleaseDir.isDirectory() && new File(potentialNativeReleaseDir, "compile_commands.json").exists()) {
            sourceDir = potentialNativeReleaseDir
            println "Found compile_commands.json for native OS (release): ${sourceDir}"
        }
    }

    // 3. Fallback: RoboRIO debug (common for robot code)
    if (sourceDir == null) {
        def potentialRoboRIODebugDir = compileCommandsRoot.toPath().resolve("roboRIO/debug").toFile()
        if (potentialRoboRIODebugDir.exists() && potentialRoboRIODebugDir.isDirectory() && new File(potentialRoboRIODebugDir, "compile_commands.json").exists()) {
            sourceDir = potentialRoboRIODebugDir
            println "Found compile_commands.json for roboRIO (debug) as fallback: ${sourceDir}"
        }
    }

    // 4. Ultimate Fallback: Most recently modified directory in TargetedCompileCommands
    if (sourceDir == null) {
        def allPossibleDirs = []
        compileCommandsRoot.eachDir { platformDir ->
            platformDir.eachDir { buildTypeDir ->
                if (new File(buildTypeDir, "compile_commands.json").exists()) {
                    allPossibleDirs << buildTypeDir
                }
            }
        }
        allPossibleDirs.sort { a, b -> b.lastModified() <=> a.lastModified() } // Sort by last modified (descending)

        if (!allPossibleDirs.empty) {
            sourceDir = allPossibleDirs.first()
            println "Falling back to most recently modified compile_commands.json: ${sourceDir}"
        }
    }

    if (sourceDir != null) {
        from sourceDir
        include 'compile_commands.json'
        into layout.projectDirectory.asFile
    } else {
        enabled = false // Disable task if source dir not found
        doLast {
            logger.error("Skipping copyCompileCommands: No suitable compile_commands.json source directory found in ${compileCommandsRoot}.")
        }
    }
}

// Ensure copyCompileCommands runs after generateCompileCommands
tasks.whenTaskAdded { task ->
    if (task.name == 'generateCompileCommands') {
        task.finalizedBy(tasks.named('copyCompileCommands'))
    }
}
