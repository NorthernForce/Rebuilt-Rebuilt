plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-3"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "de.undercouch.download" version "5.6.0"
}

// Configure the git-properties plugin to output to src/main/deploy
gitProperties {
    gitPropertiesDir = file('src/main/deploy')
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false
                    dependsOn generateGitProperties
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

def includeDesktopSupport = false
wpi.cpp.debugSimulation = false
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// BOOST SETUP
def boostVersion = "1.84.0"
def boostUnderscoreVersion = boostVersion.replace('.', '_')
def boostUrl = "https://archives.boost.io/release/${boostVersion}/source/boost_${boostUnderscoreVersion}.tar.gz"
def boostDir = file("external/boost_${boostUnderscoreVersion}")

task downloadBoost(type: Download) {
    src boostUrl
    dest file("external/boost_${boostUnderscoreVersion}.tar.gz")
    onlyIf { !boostDir.exists() }
}

task extractBoost(type: Copy, dependsOn: downloadBoost) {
    from tarTree(resources.gzip("external/boost_${boostUnderscoreVersion}.tar.gz"))
    into "external"
    onlyIf { !boostDir.exists() }
}

tasks.named("extractBoost") {
    doLast {
        println "Boost extracted to ${boostDir}"
    }
}

// GLAZE SETUP
// def glazeVersion = "5.5.4"
// def glazeUrl = "https://github.com/stephenberry/glaze/archive/refs/tags/v${glazeVersion}.tar.gz"
// def glazeDir = file("external/glaze-${glazeVersion}")

// task downloadGlaze(type: Download) {
//     src glazeUrl
//     dest file("external/glaze-${glazeVersion}.tar.gz")
//     onlyIf { !glazeDir.exists() }
// }

// task extractGlaze(type: Copy, dependsOn: downloadGlaze) {
//     from tarTree(resources.gzip("external/glaze-${glazeVersion}.tar.gz"))
//     into "external"
//     onlyIf { !glazeDir.exists() }
// }

// tasks.named("extractGlaze") {
//     doLast {
//         println "Glaze extracted to ${glazeDir}"
//     }
// }

def reflectCppVersion = "0.19.0"
def reflectCppUrl = "https://github.com/getml/reflect-cpp/archive/refs/tags/v${reflectCppVersion}.tar.gz"
def reflectCppDir = file("external/reflect-cpp-${reflectCppVersion}")
task downloadReflectCpp(type: Download) {
    src reflectCppUrl
    dest file("external/reflect-cpp-${reflectCppVersion}.tar.gz")
    onlyIf { !reflectCppDir.exists() }
}
task extractReflectCpp(type: Copy, dependsOn: downloadReflectCpp) {
    from tarTree(resources.gzip("external/reflect-cpp-${reflectCppVersion}.tar.gz"))
    into "external"
    onlyIf { !reflectCppDir.exists() }
}
tasks.named("extractReflectCpp") {
    doLast {
        println "Reflect C++ extracted to ${reflectCppDir}"
    }
}

tasks.withType(CppCompile).configureEach {
    dependsOn extractBoost, extractReflectCpp
}

nativeUtils.platformConfigs.named('windowsx86-64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsx86').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('windowsarm64').configure {
  it.cppCompiler.args.add("/std:c++2b")
}
nativeUtils.platformConfigs.named('osxuniversal').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxx86-64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm64').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxathena').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxsystemcore').configure {
  it.cppCompiler.args.add("-std=c++2b")
}
nativeUtils.platformConfigs.named('linuxarm32').configure {
    it.cppCompiler.args.add("-std=c++2b")
}


model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    srcDir "external/boost_${boostUnderscoreVersion}"
                    // srcDir "external/glaze-${glazeVersion}/include"
                    srcDir "external/reflect-cpp-${reflectCppVersion}/include"
                }
            }

            // cppCompilerArgs += '-std=c++2b'

            deployArtifact.component = it
            wpi.cpp.enableExternalTasks(it)
            wpi.sim.enable(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            wpi.cpp.enableExternalTasks(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}
